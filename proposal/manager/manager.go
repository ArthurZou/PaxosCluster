package manager

import (
    "sync"
    "github/paxoscluster/proposal"
)

// Threadsafe proposal ID generator
type ProposalManager struct {
    roleId uint64
    proposalCount uint64
    currentId proposal.Id
    exclude sync.Mutex
}

// Constructor for the proposal manager
func ConstructProposalManager(roleId uint64) *ProposalManager {
    newManager := ProposalManager {
        roleId: roleId,
        proposalCount: 0,
        currentId: proposal.Default(),
    }

    newManager.GenerateNextProposalId()
    return &newManager
}

// Returns the most current proposal ID generated by this manager
func (this *ProposalManager) GetCurrentProposalId() proposal.Id {
    this.exclude.Lock()
    defer this.exclude.Unlock()
    
    return this.currentId
}

// Generates & returns a new proposal ID
func (this *ProposalManager) GenerateNextProposalId() proposal.Id {
    this.exclude.Lock()
    defer this.exclude.Unlock()

    this.proposalCount++
    this.currentId = proposal.ConstructProposalId(this.roleId, this.proposalCount)

    return this.currentId
}

// Generates & returns a new proposal ID which will outrank the given proposal ID
func (this *ProposalManager) GenerateProposalIdToBeat(hint proposal.Id) proposal.Id {
    this.exclude.Lock()
    defer this.exclude.Unlock()

    /*
    if this.proposalCount > hint.Sequence {
        this.proposalCount++
    } else {
        this.proposalCount = hint.Sequence + 1
    }

    */
    this.currentId = proposal.ConstructProposalId(this.roleId, this.proposalCount)

    return this.currentId
}
