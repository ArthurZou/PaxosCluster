package role

import (
    "fmt"
    "github/paxoscluster/proposer"
    "github/paxoscluster/acceptor"
)

// Information possessed by all role types
type Role struct {
    RoleId uint64
    Client chan string
    Peers map[uint64]string
}

// Initialize proposer and acceptor roles
func (this *Role) Initialize(address string) {
    acceptorRole := acceptor.AcceptorRole{this, 0, 0, ""}
    proposerRole := proposer.ProposerRole{this, 0, ""}

    // Registers with RPC server
    handler := rpc.NewServer()
    err := handler.Register(&acceptorRole)
    if err != nil {
        fmt.Println("Failed to register Acceptor", role.Info.RoleId, err)
        return
    }
    err = handler.Register(&proposerRole)
    if err != nil {
        fmt.Println("Failed to register Proposer", role.Info.RoleId, err)
        return
    }

    // Listens on specified address
    ln, err := net.Listen("tcp", address)
    if err != nil {
        fmt.Println("Listening error:", err)
        return
    }

    // Dispatches connection processing loop
    go func() {
        for {
            cxn, err := ln.Accept()
            if err != nil { continue }
            go handler.ServeConn(cxn)
        }
    }()

    // Begins heartbeat
    go this.heartbeat()
}

func (this *Role) heartbeat() {
}

// Request sent out by proposer during prepare phase
type PrepareReq struct {
    ProposalId uint64
}

// Response sent by acceptors during prepare phase
type PrepareResp struct {
    PromiseAccepted bool
    AcceptedProposalId uint64
    AcceptedValue string
}

// Request sent out by proposer during proposal phase
type ProposalReq struct {
    ProposalId uint64
    Value string
}

// Response sent by acceptors during proposal phase
type ProposalResp struct {
    AcceptedId uint64
}
